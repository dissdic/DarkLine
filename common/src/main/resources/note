# Netty随记
## SimpleChannelInboundHandler 与 ChannelInboundHandler
>你可能会想：为什么我们在客户端使用的是 SimpleChannelInboundHandler，而不是在 EchoServerHandler 中所使用的 ChannelInboundHandlerAdapter 呢？
这和两个因素的相互作用有关：业务逻辑如何处理消息以及 Netty 如何管理资源。
在客户端，当 channelRead0()方法完成时，你已经有了传入消息，并且已经处理完它了。当该方法返回时，SimpleChannelInboundHandler 负责释放指向保存该消息的 ByteBuf 的内存引用。
在 EchoServerHandler 中，你仍然需要将传入消息回送给发送者，而 write()操作是异步的，直到 channelRead()方法返回后可能仍然没有完成。
为此，EchoServerHandler扩展了 ChannelInboundHandlerAdapter，其在这个时间点上不会释放消息。
消息在 EchoServerHandler 的 channelReadComplete()方法中，当 writeAndFlush()方法被调用时被释放
## OIO和Netty
- Channel—Socket
- EventLoop—控制流、多线程处理、并发
- ChannelFuture—异步通知
## Netty发送消息
>在 Netty 中，有两种发送消息的方式。你可以直接写到 Channel 中，也可以 写到和 ChannelHandler相关联的ChannelHandlerContext对象中。前一种方式将会导致消息从ChannelPipeline 的尾端开始流动，而后者将导致消息从 ChannelPipeline 中的下一个 ChannelHandler 开始流动。
##常用适配器类
下面这些是编写自定义 ChannelHandler 时经常会用到的适配器类：
- ChannelHandlerAdapter
- ChannelInboundHandlerAdapter
- ChannelOutboundHandlerAdapter
- ChannelDuplexHandler
##EventLoop和Channel
- 一个 EventLoopGroup 包含一个或者多个 EventLoop；
- 一个 EventLoop 在它的生命周期内只和一个 Thread 绑定；
- 所有由 EventLoop 处理的 I/O 事件都将在它专有的 Thread 上被处理；
- 一个 Channel 在它的生命周期内只注册于一个 EventLoop；
- 一个 EventLoop 可能会被分配给一个或多个 Channel。

**一个EventLoop，或者说一个thread处理多个连接。也就是非阻塞IO
所以说EventLoop是netty的关键，去掉他，那就是阻塞IO,一线线程处理一个IO流所有的事件**
##ChannelHandler典型用途
- 将数据从一种格式转换为另一种格式；
- 提供异常的通知；
- 提供 Channel 变为活动的或者非活动的通知；
- 提供当 Channel 注册到 EventLoop 或者从 EventLoop 注销时的通知；
- 提供有关用户自定义事件的通知。
##channelPipeline和channelConfig
>每个 Channel 都将会被分配一个 ChannelPipeline 和 ChannelConfig。
 ChannelConfig 包含了该 Channel 的所有配置设置，并且支持热更新

可以动态的随时通过channel获取pipeline从而动态添加特定请求的handler
##Channel的线程安全性
> Netty 的 Channel 实现是线程安全的，因此你可以存储一个到 Channel 的引用，并且每当你需要向远程节点写数据时，都可以使用它，即使当时许多线程都在使用它。需要注意的是，消息将会被保证按顺序发送。
```
final Channel channel = ...
final ByteBuf buf = Unpooled.copiedBuffer("your data",
CharsetUtil.UTF_8).retain();
Runnable writer = new Runnable() {
@Override
public void run() {
channel.writeAndFlush(buf.duplicate());
}
};
Executor executor = Executors.newCachedThreadPool();
// write in one thread
executor.execute(writer);
// write in another thread
executor.execute(writer);
```
##Channel的IO状态
|名称|状态|
|  ----  | ----  |
|OP_ACCEPT|请求在接受新连接并创建 Channel 时获得通知|
|OP_CONNECT|请求在建立一个连接时获得通知|
|OP_READ|请求当数据已经就绪，可以从 Channel 中读取时获得通知|
|OP_WRITE|请求当可以向Channel中写更多的数据时获得通知。这处理了套接字缓冲区被完全填满时的情况，这种情况通常发生在数据的发送速度比远程节点可处理的速度更快的时候|
##零拷贝
> 零拷贝（zero-copy）是一种目前只有在使用 NIO 和 Epoll 传输时才可使用的特性。它使你可以快速
  高效地将数据从文件系统移动到网络接口，而不需要将其从内核空间复制到用户空间，其在像 FTP 或者
  HTTP 这样的协议中可以显著地提升性能。但是，并不是所有的操作系统都支持这一特性。特别地，它对
  于实现了数据加密或者压缩的文件系统是不可用的——只能传输文件的原始内容。反过来说，传输已被
  加密的文件则不是问题。
###从内核空间复制到用户空间是什么意思？
首先了解两种模式
- Kernal模式
> 在内核模式下，代码具有对硬件的所有控制权限，可以执行所有发CPU指令，可以访问任意地址的内存。
> 内核模式是为操作系统的最底层，最可信的函数服务的。在内核模式下任何异常都是灾难性的，将会导致整台极其停机。
- User模式
> 在用户模式下，代码没有对硬件直接的操作权限。也不能直接访问地址的内存，程序是通过调用系统接口（System APIs）来访问内存和硬件
> 在这种保护模式下，即时程序发生崩溃也是可以可以恢复的，电脑中大部分的应用程序都是运行在用户模式下，包括大部分的硬件驱动。

注意用户模式和内核模式的转换代码是非常高的，对于用户来说就是程序崩溃还是系统崩溃的区别。
##Netty传输方式
- NIO:JDK实现，基于选择器的方式(selector) 支持零拷贝
- epoll:linux的非阻塞IO,比NIO快 支持零拷贝
- OIO:JDK阻塞IO(socket),有些程序的设计适用阻塞流，阻塞流的关键在于一个线程只能处理一个请求
netty使用epoll（仅Linux支持）的传输方式只需要将 NioEventLoopGroup替换为 EpollEventLoopGroup ，并且将 NioServerSocketChannel.class 替换为EpollServerSocketChannel.class 即可
##ByteBuf特性
- 它可以被用户自定义的缓冲区类型扩展； 
- 通过内置的复合缓冲区类型实现了透明的零拷贝；
- 容量可以按需增长（类似于 JDK 的 StringBuilder）； 
- 在读和写这两种模式之间切换不需要调用 ByteBuffer 的 flip()方法； 
- 读和写使用了不同的索引，有两个索引writerIndex和readerIndex，JDK的bytebuff只有一个，读写切换时需要调用flip方法
- 支持方法的链式调用；
- 支持引用计数； 
- 支持池化。
> 池化后放在常量池中，具体在JVM的方法区里（永久代（JDK1.7）,元空间（1.8）），不在堆里
##ByteBuf的使用模式
- 堆缓冲区
###实例代码
```
ByteBuf heapBuf = ...;
if (heapBuf.hasArray()) {
byte[] array = heapBuf.array();
int offset = heapBuf.arrayOffset() + heapBuf.readerIndex();
int length = heapBuf.readableBytes();
handleArray(array, offset, length);
}
```
优点：在数据没有被池化的情况下，分配和释放空间效率高
缺点：IO操作需要将数据从磁盘到内核地址空间到用户地址空间（或者反过来）复制流转，多个很多中间缓冲区的复制操作
- 直接缓冲区
###实例代码
```
ByteBuf directBuf = ...;
if (!directBuf.hasArray()) {
int length = directBuf.readableBytes();
byte[] array = new byte[length];
directBuf.getBytes(directBuf.readerIndex(), array);
handleArray(array, 0, length);
}
```
优点：避免了中间缓冲区带来的开销，直接在堆外物理内存里申请一块内存，作为缓冲区，性能更高
缺点：分配和释放都较为昂贵，由于不是堆内内存，GC可以回收直接缓冲的对象引用，但是实际堆外内存回收不受控制（虚引用）。
## discardReadBytes()
释放可丢弃字节（已被读过字节），内存紧张使用，不可频繁使用，因为释放可丢弃字节往往伴随着可读字节，可写字节（刚扩展，未被使用，空闲的空间）的左移，有可能会导致内存复制
## clear()
重置索引，writerIndex = readerIndex = 0.缓冲区（bytebuf）都是可写的
> 在往 ByteBuf 中写入数据时，其将首先确保目标 ByteBuf 具有足够的可写入空间来容纳当前要写入
  的数据，如果没有，则将检查当前的写索引以及最大容量是否可以在扩展后容纳该数据，可以则会分配
  并调整容量，否则就会抛出该异常


