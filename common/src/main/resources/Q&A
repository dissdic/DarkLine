SimpleChannelInboundHandler 与 ChannelInboundHandler
你可能会想：为什么我们在客户端使用的是 SimpleChannelInboundHandler，而不是在 EchoServerHandler 中所使用的 ChannelInboundHandlerAdapter 呢？这和两个因素的相互作用有
关：业务逻辑如何处理消息以及 Netty 如何管理资源。
在客户端，当 channelRead0()方法完成时，你已经有了传入消息，并且已经处理完它了。当该方
法返回时，SimpleChannelInboundHandler 负责释放指向保存该消息的 ByteBuf 的内存引用。
在 EchoServerHandler 中，你仍然需要将传入消息回送给发送者，而 write()操作是异步的，直
到 channelRead()方法返回后可能仍然没有完成。为此，EchoServerHandler
扩展了 ChannelInboundHandlerAdapter，其在这个时间点上不会释放消息。
消息在 EchoServerHandler 的 channelReadComplete()方法中，当 writeAndFlush()方
法被调用时被释放

 Channel—Socket；
 EventLoop—控制流、多线程处理、并发；
 ChannelFuture—异步通知。

在 Netty 中，有两种发送消息的方式。你可以直接写到 Channel 中，也可以 写到和 ChannelHandler相关联的ChannelHandlerContext对象中。前一种方式将会导致消息从ChannelPipeline 的尾端开始流动，而后者将导致消息从 ChannelPipeline 中的下一个 ChannelHandler 开始流动。

下面这些是编写自定义 ChannelHandler 时经常会用到的适配器类：
 ChannelHandlerAdapter
 ChannelInboundHandlerAdapter
 ChannelOutboundHandlerAdapter
 ChannelDuplexHandler

 一个 EventLoopGroup 包含一个或者多个 EventLoop；
 一个 EventLoop 在它的生命周期内只和一个 Thread 绑定；
 所有由 EventLoop 处理的 I/O 事件都将在它专有的 Thread 上被处理；
 一个 Channel 在它的生命周期内只注册于一个 EventLoop；
 一个 EventLoop 可能会被分配给一个或多个 Channel。
一个EventLoop，或者说一个thread处理多个连接。也就是非阻塞IO
所以说EventLoop是netty的关键，去掉他，那就是阻塞IO,一线线程处理一个IO流所有的事件

ChannelHandler 的典型用途包括：
 将数据从一种格式转换为另一种格式；
 提供异常的通知；
 提供 Channel 变为活动的或者非活动的通知；
 提供当 Channel 注册到 EventLoop 或者从 EventLoop 注销时的通知；
 提供有关用户自定义事件的通知。